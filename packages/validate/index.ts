import { config } from "dotenv";
import Joi, {
  ErrorFormattingOptions,
  BaseValidationOptions,
  ValidationOptions,
  AsyncValidationOptions,
  LanguageMessageTemplate,
  ErrorValidationOptions,
  RenameOptions,
  TopLevelDomainOptions,
  HierarchySeparatorOptions,
  EmailOptions,
  DomainOptions,
  HexOptions,
  IpOptions,
  GuidOptions,
  UriOptions,
  DataUriOptions,
  Base64Options,
  SwitchCases,
  SwitchDefault,
  WhenOptions,
  WhenSchemaOptions,
  Cache,
  CacheProvisionOptions,
  CacheConfiguration,
  CompileOptions,
  IsSchemaOptions,
  ReferenceOptions,
  StringRegexOptions,
  RuleOptions,
  ErrorReport,
  ValidationError,
  ValidationErrorItem,
  ValidationResult,
  CreateErrorOptions,
  ModifyOptions,
  MutateRegisterOptions,
  SetFlagOptions,
  CustomHelpers,
  AddRuleOptions,
  SchemaInternals,
  AnySchema,
  Description,
  Context,
  State,
  BooleanSchema,
  NumberSchema,
  StringSchema,
  SymbolSchema,
  ArraySortOptions,
  ArrayUniqueOptions,
  ArraySchema,
  ObjectPatternOptions,
  ObjectSchema,
  BinarySchema,
  DateSchema,
  FunctionSchema,
  AlternativesSchema,
  LinkSchema,
  Reference,
  RuleArgs,
  ExtensionRule,
  CoerceResult,
  CoerceObject,
  ExtensionFlag,
  ExtensionTermManifest,
  ExtensionTerm,
  Extension,
  Err,
  Root,
  LanguageMessages,
  PresenceMode,
  GuidVersions,
  ValidationErrorFunction,
  CustomValidator,
  ExternalValidationFunction,
  SchemaLike,
  SchemaMap,
  Schema,
  SchemaFunction,
  ComparatorFunction,
  ExtensionBoundSchema,
  RuleMethod,
  CoerceFunction,
  ExtensionFactory
} from "@hapi/joi";

config();

/**
 * Validate an object with its schema map
 * @param schemaMap - Schame map for Joi validation
 * @param data - Data to validate
 */
export const joiValidate = (schemaMap: Joi.SchemaMap, data: any) => {
  const schema = Joi.object().keys(schemaMap);
  const result = schema.validate(data);
  if (result.error) throw new Error(`joi:${JSON.stringify(result.error)}`);
  return true;
};

export {
  Joi,
  ErrorFormattingOptions,
  BaseValidationOptions,
  ValidationOptions,
  AsyncValidationOptions,
  LanguageMessageTemplate,
  ErrorValidationOptions,
  RenameOptions,
  TopLevelDomainOptions,
  HierarchySeparatorOptions,
  EmailOptions,
  DomainOptions,
  HexOptions,
  IpOptions,
  GuidOptions,
  UriOptions,
  DataUriOptions,
  Base64Options,
  SwitchCases,
  SwitchDefault,
  WhenOptions,
  WhenSchemaOptions,
  Cache,
  CacheProvisionOptions,
  CacheConfiguration,
  CompileOptions,
  IsSchemaOptions,
  ReferenceOptions,
  StringRegexOptions,
  RuleOptions,
  ErrorReport,
  ValidationError,
  ValidationErrorItem,
  ValidationResult,
  CreateErrorOptions,
  ModifyOptions,
  MutateRegisterOptions,
  SetFlagOptions,
  CustomHelpers,
  AddRuleOptions,
  SchemaInternals,
  AnySchema,
  Description,
  Context,
  State,
  BooleanSchema,
  NumberSchema,
  StringSchema,
  SymbolSchema,
  ArraySortOptions,
  ArrayUniqueOptions,
  ArraySchema,
  ObjectPatternOptions,
  ObjectSchema,
  BinarySchema,
  DateSchema,
  FunctionSchema,
  AlternativesSchema,
  LinkSchema,
  Reference,
  RuleArgs,
  ExtensionRule,
  CoerceResult,
  CoerceObject,
  ExtensionFlag,
  ExtensionTermManifest,
  ExtensionTerm,
  Extension,
  Err,
  Root,
  LanguageMessages,
  PresenceMode,
  GuidVersions,
  ValidationErrorFunction,
  CustomValidator,
  ExternalValidationFunction,
  SchemaLike,
  SchemaMap,
  Schema,
  SchemaFunction,
  ComparatorFunction,
  ExtensionBoundSchema,
  RuleMethod,
  CoerceFunction,
  ExtensionFactory
};
